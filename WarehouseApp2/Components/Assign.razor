@using WarehouseService.Models;

@inject UIStateContainer stateContainer

<PageTitle>Auto Assign</PageTitle>
<MudText Typo="Typo.h3" GutterBottom="true">Auto Assign</MudText>

<MudButton
    Color="Color.Error"
    Disabled="!selectedItems.Any()"
    OnClick="DeleteSelectedAssignments"
    StartIcon="@Icons.Material.Filled.Delete"
    Variant="Variant.Filled"
    >
    Remove Assignments
</MudButton>

<MudButton
    Color="Color.Primary"
    Href="/skus/confirm"
    Variant="Variant.Filled"
>
    Confirm All
</MudButton>

<MudTable 
    @bind-SelectedItems="selectedItems" 
    @ref="_table" 
    Bordered="true"
    Filter="new Func<Assignment,bool>(FilterFunc1)"
    Hover=true
    Items="@Assignments"
    MultiSelection="true" 
    SelectOnRowClick="true"
    Striped="true"
    T="Assignment" 
>
    <ToolBarContent>
        <MudText Typo="Typo.h6">Assignments</MudText>
        <MudSpacer />
        <MudTextField
            @bind-Value="searchString1"
            Placeholder="Search"
            Adornment="Adornment.Start"
            AdornmentIcon="@Icons.Material.Filled.Search"
            IconSize="Size.Medium"
            Class="mt-0">
        </MudTextField>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>SKU</MudTh>
        <MudTh>SKU Description</MudTh>
        <MudTh>Assigned Pick Location</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="sku">
            <MudLink Href=@($"skus/{context.Sku.Id}")>@context.Sku.Name</MudLink>
        </MudTd>
        <MudTd DataLabel="skuDescription">
            @context.Sku.Description
        </MudTd>
        <MudTd DataLabel="location">
            <MudLink Href=@($"locations/{context.PickLocation.Id}")>@context.PickLocation.Name</MudLink>
        </MudTd>
    </RowTemplate>
    <PagerContent>
        <MudTablePager />
    </PagerContent>
</MudTable>

@code {
    [Parameter]
    public List<Assignment> Assignments { get; set; }
    [Parameter]
    public HashSet<Sku> SkusToAssign { get; set; }

    private AutoAssign? MyAutoAssign;
    private HashSet<Assignment> selectedItems = new HashSet<Assignment>();
    private MudTable<Assignment> _table;
    private string searchString1 = "";

    private bool FilterFunc1(Assignment element) => FilterFunc(element, searchString1);

    private bool FilterFunc(Assignment element, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.Sku.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.PickLocation.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }
    
    protected override void OnInitialized()
    {
        base.OnInitialized();
        AutoAssign MyAutoAssign = stateContainer.SuggestAssignments(SkusToAssign.ToList());
        Assignments.AddRange(MyAutoAssign.Assignments);
    }

    // Remove the selected items from the list
    private void DeleteSelectedAssignments()
    {
        foreach (var item in selectedItems)
        {
            Assignments.Remove(item);
        }
        selectedItems.Clear();
    }
}
